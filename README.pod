=head1 JSONSL

JSON Stateful (or Simple, or Stacked) Lexer

=head1 Why another (and yet another) JSON lexer?

I took inspiration from some of the uses of I<YAJL>, which looked
quite nice, but whose build system seemed unusable, source horribly
mangled, and grown beyond its original design. In other words, I saw
it as a bunch of cruft.

Instead of bothering to spend a few days figuring out how to use it,
I came to a conclusion that the tasks I needed (simple token
notifications coupled with some kind of state shift detection), I could
do with a simple, small, ANSI C embeddable source file.

I am still not sure if I<YAJL> provides the featureset of I<JSONSL>, but
I'm guessing I've got at least I<some> innovation.

I<JSONSL>

Inspiration was also taken from Joyent's B<http-parser> project, which
seems to use a similar, embeddable, and simple model.

Here's a quick featureset

=over

=item Stateful

Maintains state about current descent/recursion/nesting level
Furthermore, you can access information about 'lower' stacks
as long as they are activ.

=item Decoupling Object Graph from Data

JSONSL abstracts the object graph from the actual (and usually
more CPU-intensive) work of actually populating higher level
structures such as "hashes" and "arrays" with "decoded" and
"meaningful" values. Using this, one can implement an on-demand
type of conversion.

=item Callback oriented, selectively

Invokes callbacks for all sorts of events, but you can control
which kind of events you are interested in receiving without
writing a ton of wrapper stubs

=item Non-Buffering

This doesn't buffer, copy, or allocate any data. The only allocation
overhead is during the initialization of the parser, in which the
initial stack structures are initialized

=item Simple

Just a C source file, and a corresponding header file. ANSI C.

=back

The rest of this documentation needs work

=head1 Details

=head2 Terminology

Because the JSON spec is quite confusing in its terminology, especially
when we want to map it to a different model, here is a listing of the
terminology used here.

I will use I<element>, I<object>, I<state> interchangeably. They all
refer to some form of atomic unit as far as JSON is concerned.

I will use the term I<hash> for those things which look like C<{"foo":"bar"}>,
and refer to its contents as I<keys> and I<values>

I will use the term I<list> for those things which look like C<["hello", "byebye"]>,
and their contents as I<list elements> or I<array elements> explicitly


=head2 Model

=head3 States

A state represents a JSON element, this can be a
a hash (C<T_OBJECT>), array (C<T_LIST>), hash key
(C<T_HKEY>), string (C<T_STRING>), or a 'special' value (C<T_SPECIAL>)
which should be either a numeric value, or one of C<true, false, null>.

A state comprises and maintains the following information

=over

=item Type

This merely states what type it is - as one of the C<JSONSL_T_*> constants
mentioned above

=item Positioning

This contains positioning information mapping the location of the element
as an offset relative to the input stream. When a state begins, its I<start>
position is set. Whenever control returns back to the state, its I<current>
position is updated and set to the point in the stream when the return
occured

=item Extended Information

For non-scalar state types, information regarding the number of children
contained is stored.

=item User Data

This is a simple void* pointer, and allows you to associate your own data
with a given state

=back

=head3 Stack

A stack consists of multiple states. When a state begins, it is I<pushed>
to the stack, and when the state terminates, it is I<popped> from the stack
and returns control to the previous stack state.

When a state is popped, the contained information regarding positioning and
children is complete, and it is therefore possible to retrieve the entire
element in its byte-stream.

Once a state has been popped, it is considered invalid (though it is still
valid during the callback).

Below is a diagram of a sample JSON stream annotated with stack/state
information.

 Level 0
    {

    Level 1

        Level 2
            "ABC"
        :
        Level 2
            "XYZ"
        ,

    Level 1

        [
        Level 2

            {
            Level 3

                Level 4
                "Foo":"Bar"

            Level 3
            }
        Level 2
        ]
    Level 1
    }

=head1 USING

The header file C<jsonsl.h> contains the API. Read it.

As an additional note, you can 'extend' the state structure
(thereby eliminating the need to allocate extra pointers for
the C<void *data> field) by defining the C<JSONSL_STATE_USER_FIELDS>
macro to expand to additonal struct fields.

This is assumed as the default behavior - and should work when
you compile your project with C<jsonsl.c> directly.

If you wish to use the 'generic' mode, make sure to
C<#define> or C<-D> the C<JSONSL_STATE_GENERIC> macro.

=head2 UNICODE

While JSONSL does not support unicode directly (it does not
decode \uxxx escapes, nor does it care about any non-ascii
characters), you can compile JSONSL using the C<JSONSL_USE_WCHAR>
macro. This will make jsonsl iterate over C<wchar_t> characters
instead of the good 'ole C<char>. Of course you would need to
handle processing the stream correctly to make sure the multibyte
stream was complete.

=head1 AUTHOR AND COPYRIGHT

Copyright (C) 2012 M. Nunberg.

See C<LICENSE> for license information.
